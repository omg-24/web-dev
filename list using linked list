#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int val) {
        data = val;
        next = nullptr;
    }
};

class SinglyLinkedList {
    Node* head;

public:
    SinglyLinkedList() {
        head = nullptr;
    }

    void insert(int index, int value) {
        Node* newNode = new Node(value);
        if (index == 0) {
            newNode->next = head;
            head = newNode;
            return;
        }

        Node* temp = head;
        for (int i = 0; i < index - 1 && temp != nullptr; i++) {
            temp = temp->next;
        }

        if (temp == nullptr) {
            cout << "Insert failed: Index out of bounds.\n";
            return;
        }

        newNode->next = temp->next;
        temp->next = newNode;
    }

    void remove(int index) {
        if (head == nullptr) {
            cout << "Delete failed: List is empty.\n";
            return;
        }

        if (index == 0) {
            Node* del = head;
            head = head->next;
            delete del;
            return;
        }

        Node* temp = head;
        for (int i = 0; i < index - 1 && temp->next != nullptr; i++) {
            temp = temp->next;
        }

        if (temp->next == nullptr) {
            cout << "Delete failed: Index out of bounds.\n";
            return;
        }

        Node* del = temp->next;
        temp->next = del->next;
        delete del;
    }

    void display() {
        Node* temp = head;
        cout << "LinkedList: ";
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << "\n";
    }

    ~SinglyLinkedList() {
        Node* temp;
        while (head != nullptr) {
            temp = head;
            head = head->next;
            delete temp;
        }
    }
};

int main() {
    SinglyLinkedList list;
    list.insert(0, 5);
    list.insert(1, 10);
    list.insert(1, 7);
    list.display();

    list.remove(1);
    list.display();

    return 0;
}
